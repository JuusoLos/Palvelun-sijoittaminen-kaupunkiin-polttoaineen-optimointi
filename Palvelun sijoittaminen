# -*- coding: utf-8 -*-
"""
Created on Thu Nov 10 21:20:31 2022

@author: juuso
"""

# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
import math

plt.figure(dpi=1200)
    
    

#ensimmäiset koordinaatit:
asuntojenMäärä = 334
kaupatAlussa =6 #vikat koordinaatit
kauppojenMäärä =7 #vikat koordinaatit  + lisättävä kauppa



x_alku=[422704.655,421751.654,421641.199,421755.381,421683.381,421873.199,421879.249,421849.694,421825.807,421748.217,421849.808,421964.717,422078.665,422016.847,422147.958,422083.231,422166.14,422278.867,421925.938,422235.061,422339.061,422433.607,422598.951,422634.988,422626.799,421523.008,421611.736,421657.554,421683.42,421756.875,421884.147,422049.965,421424.668,421568.668,421682.934,421469.116,421547.502,422293.194,422378.285,421312.471,421330.652,421475.38,421752.818,421677.954,422456.845,422544.845,422627.013,422685.967,422734.717,422900.511,423083.555,423069.737,423166.055,423278.782,423256.943,423470.955,423634.591,423463.682,423547.318,423527.682,423455.682,423624.046,423638.591,423750.85,423659.214,423922.759,423858.577,423885.487,423763.305,423715.305,423844.759,423976.603,423567.902,424075.084,424177.528,424105.422,424192.695,424117.786,423999.386,424093.204,424108.477,424049.568,424118.441,424592.735,424682.189,424578.917,424445.826,424340.371,424637.826,424475.644,424395.644,422339.305,422437.516,422530.333,422632.151,422600.151,422768.879,422848.151,422907.06,422969.606,423040.151,422907.06,423027.06,422943.424,422787.788,423027.788,423231.47,423331.834,423180.561,423347.834,423234.38,423362.38,423390.72,423495.407,423621.952,423533.952,423667.043,423557.225,423776.407,423957.498,423796.043,423989.757,421678.052,421723.142,421814.082,421811.9,421739.173,421892.753,421960.39,422003.299,421942.208,421984.39,422046.935,422260.874,422378.146,421798.8,421962.142,421958.506,421960.525,422112.503,422237.594,422124.867,422174.322,422294.322,422374.514,422521.423,422501.06,422482.151,422771.147,422755.147,422917.329,422844.602,422919.511,422587.155,422507.882,422604.609,422718.791,422829.337,422567.518,422714.428,422613.337,422733.337,422610.427,422644.609,422643.434,422703.991,422694.045,422756.591,422670.045,422889.983,422865.255,422811.854,422808.217,422903.49,422830.763,422794.742,421253.046,421201.849,421233.44,421116.712,421306.167,421098.167,421171.258,421097.076,421025.803,420998.167,420970.167,421093.894,420935.348,420894.985,420870.324,420869.46,420796.006,420776.733,420838.088,420723.755,420669.937,420654.301,420625.937,420687.564,420639.564,420578.11,420493.923,420494.65,420420.832,420418.286,420335.013,420301.923,420346.286,420278.286,420236.104,420319.322,420184.777,420106.769,420039.86,420007.86,419962.769,420036.951,420002.042,419815.86,419882.042,419913.314,419934.405,419826.746,419737.292,419799.11,419743.11,419781.655,419820.985,421189.9,421090.764,421042.4,421090.741,421006.741,420986.377,421072.923,420895.695,420924.059,420890.241,420953.877,420797.282,421172.325,421051.234,420929.996,420825.268,420737.648,420778.986,420968.582,420794.219,420502.69,419988.54,419627.086,419629.267,419272.176,419084.539,419004.539,418980.98,418977.618,418707.073,418810.055,418565.464,418491.977,418143.694,418128.421,418123.273,417865.4,417660.384,419387.417,418605.921,418555.798,423629.728,423805.001,424826.158,425066.158,425498.377,425476.604,425819.877,426194.267,425225.54,424966.927,425257.358,425501.834,425680.925,425869.641,426029.641,426104.914,426171.823,426375.096,425980.096,426375.277,426118.888,425706.446,425261.001,424375.91,425051.125,425355.192,425957.101,425688.147,426376.103,425327.441,424784.842,425346.801,425387.528,425637.116,425832.025,425727.011,426092.739,426290.557,426357.24,426523.445,426561.223,426974.524,425150.664,424701.906,424594.952,424120.043,426084.808,427503.305,428819.09,429140.975,427563.109,425533.188,425221.188,425382.339,425902.929,425841.011,423296.799,423522.254,422578.503,422523.791,422696.972,422833.7,422754.587,422813.746] #ensin asunnot, sitten risteykset ja lopuksi kaupat

y_alku=[6779224.959,6783544.284,6783474.466,6783438.102,6783367.557,6783415.557,6783480.98,6783331.66,6783227.26,6783262.38,6783245.539,6783238.266,6783273.463,6783154.19,6783160.534,6783061.625,6783073.262,6783076.171,6783179.645,6782963.249,6782987.976,6782934.158,6783176.195,6783385.869,6783088.311,6783281.944,6783170.989,6783182.625,6783076.696,6783078.151,6783011.969,6782939.969,6783255.407,6783095.407,6782968.095,6783098.277,6783003.787,6782751.314,6782792.769,6783181.56,6783074.651,6783034.742,6782810.046,6782783.683,6782694.564,6782761.473,6782734.329,6782725.472,6782662.541,6782610.509,6782608.067,6782552.067,6782549.885,6782558.612,6782631.117,6782669.187,6782674.278,6782587.732,6782524.46,6782461.096,6782445.46,6782496.096,6782544.096,6782480.609,6782428.973,6782410.018,6782473.836,6782381.473,6782394.563,6782323.291,6782316.018,6782239.098,6782336.923,6782230.972,6782165.213,6782325.941,6782314.304,6782399.395,6782528.783,6782485.874,6782563.692,6782616.783,6782722.129,6781937.458,6781950.549,6781986.185,6782040.003,6782117.822,6782085.094,6782144.731,6782270.549,6782629.282,6782564.411,6782630.267,6782451.358,6782384.448,6782244.085,6782168.448,6782216.448,6782126.994,6782197.539,6782290.63,6782256.448,6782382.267,6782361.176,6782365.539,6782031.061,6782099.425,6782175.061,6782148.879,6782237.607,6782215.789,6782306.56,6782121.126,6782123.308,6782190.944,6782190.217,6782259.308,6782099.671,6782096.035,6782144.035,6782004.911,6782668.78,6782587.325,6782519.658,6782424.386,6782301.477,6782455.416,6782393.597,6782344.87,6782457.597,6782498.325,6782311.416,6782236.668,6782177.486,6782148.679,6782028.69,6782129.053,6781891.529,6781960.287,6782019.196,6782061.378,6781987.923,6781953.014,6781929.512,6781987.693,6781892.421,6781778.966,6781903.463,6781821.281,6781877.281,6781836.554,6781777.645,6781814.711,6781724.529,6781731.074,6781767.438,6781757.983,6781654.711,6781716.529,6781580.529,6781631.438,6781498.347,6781510.711,6781360.13,6781455.852,6781300.211,6781384.575,6781156.939,6781641.912,6781555.367,6781418.125,6781329.215,6781287.761,6781239.034,6781148.553,6783524.315,6783514.824,6783573.779,6783561.415,6783671.234,6783629.052,6783667.597,6783591.234,6783661.779,6783594.87,6783658.87,6783520.06,6783716.424,6783637.515,6783776.388,6783711.658,6783681.839,6783761.476,6783878.941,6783870.239,6783928.421,6783781.876,6783840.421,6783708.425,6783716.061,6783881.607,6783777.957,6783875.412,6783832.503,6783910.684,6783849.957,6783878.684,6783956.866,6783944.139,6784048.139,6784076.202,6784367.612,6784229.112,6784282.203,6784310.566,6784339.657,6784367.294,6784432.748,6784562.93,6784476.385,6784546.203,6784632.021,6784744.407,6784681.135,6784828.19,6784810.371,6784859.826,6784941.215,6783316.381,6783331.199,6783287.926,6783278.472,6783251.563,6783181.381,6783219.926,6783175.154,6783240.972,6783323.881,6783327.517,6783381.999,6783420.057,6783438.239,6783458.489,6783502.853,6783572.268,6783160.471,6782933.614,6783064.116,6783220.348,6783509.625,6783684.898,6783734.353,6783962.716,6783702.139,6783522.503,6783760.676,6784188.67,6784241.034,6783893.841,6783878.341,6783981.867,6784237.299,6784175.481,6783943.904,6784299.787,6784501.732,6785277.478,6786444.551,6786910.437,6781753.159,6781482.614,6780881.072,6780789.436,6780446.81,6780091.901,6780574.81,6780781.365,6781519.092,6781817.519,6782290.428,6782476.859,6782897.586,6782849.108,6782721.108,6783073.29,6782969.29,6783106.653,6783204.29,6783660.654,6783689.408,6783866.017,6783514.784,6783617.875,6784062.279,6784336.79,6784512.062,6784679.341,6784175.983,6784776.025,6784885.046,6784987.776,6785189.231,6785318.168,6785379.258,6784972.814,6785255.087,6785263.087,6785406.736,6785214.383,6784818.694,6784129.832,6785337.894,6785631.742,6785331.249,6785519.613,6785637.911,6785285.441,6784458.493,6784772.589,6785859.576,6785777.407,6785581.77,6786097.345,6786279.557,6787483.902,6786696.554,6786298.008,6780948.687,6780567.112,6780181.749,6780075.567,6779945.385,6779595.868]


risteykset_x=[421685.576,421607.076,421798.349,421881.985,421807.804,422043.473,421994.746,422197.655,422147.473,422354.565,421721.472,421498.680,421628.134,421768.827,421792.827,421866.281,422037.918,422312.827,421349.378,421268.650,421428.650,421505.014,421446.105,421574.832,421641.741,421739.332,421842.760,422001.306,422270.344,422508.082,422606.264,422908.750,422714.568,423078.638,423497.315,423514.770,423533.148,423555.694,423608.434,423799.445,423780.536,423861.263,423755.082,423726.527,424090.932,424042.362,424016.180,423984.180,424522.407,424496.953,424567.498,424670.771,424787.134,424742.043,422569.124,422521.124,422817.418,422860.509,422979.442,422875.623,423093.604,423082.694,423270.102,423289.738,423331.920,423365.375,423560.465,423593.193,423619.375,423642.647,423861.477,423850.568,421834.466,421731.193,421980.102,421751.966,421815.966,421833.420,422007.765,421922.674,421910.310,421824.478,422313.822,422183.641,422377.822,422406.186,422657.095,422628.732,422559.486,422524.577,422852.577,422838.032,422816.941,422621.305,422805.824,422582.037,422632.219,422651.128,422792.219,422774.037,422765.650,422743.832,422728.884,422713.612,422670.459,422835.796,422936.818,423257.536,421197.145,421110.789,420932.871,420952.508,420803.417,420911.053,420769.009,421159.650,421084.772,420974.953,420868.772,420769.273,420696.107,421124.356,421017.140,420918.231,420827.322,420729.867,420666.595,420518.305,420456.688,420387.597,420319.233,420260.324,420516.324,420285.052,420159.613,420212.704,420061.652,420018.743,419990.379,420118.379,419995.470,420068.223,420144.587,419852.538,419774.720,419828.538,419783.447,419773.174,419740.494,419135.077,420857.697,419469.927,419249.834,419064.744,418978.925,418634.198,423484.275,424366.172,424969.808,425176.354,424902.147,424537.987,425966.999,425805.028,426417.866,426168.089]
risteykset_y=[6783544.284,6783441.611,6783402.338,6783290.338,6783204.520,6783207.193,6783102.466,6783127.193,6783028.284,6782915.683,6783116.637,6783170.938,6783027.666,6782971.037,6783040.128,6782950.674,6782893.219,6782793.583,6783230.922,6783129.831,6783019.286,6783057.104,6783121.831,6782975.649,6782908.740,6782868.058,6782827.671,6782776.761,6782705.900,6782695.684,6782699.320,6782563.521,6782670.430,6782512.611,6782365.813,6782426.904,6782470.163,6782577.800,6782447.397,6782384.073,6782324.436,6782311.345,6782246.618,6782409.816,6782114.979,6782381.005,6782463.914,6782589.823,6782091.287,6782005.469,6781950.196,6781912.378,6781884.014,6781781.469,6782607.464,6782514.373,6782230.525,6782147.525,6782217.133,6782377.224,6782186.146,6782105.419,6782171.205,6782232.296,6782316.659,6782404.659,6782121.568,6782189.932,6782248.114,6782299.750,6782195.095,6782112.913,6782745.895,6782715.350,6782617.168,6782635.122,6782470.031,6782315.122,6782199.982,6782113.436,6782055.254,6782592.780,6782022.014,6782028.559,6781956.559,6782040.923,6781930.377,6781845.286,6781785.507,6781746.234,6781888.052,6781808.052,6781712.052,6781680.052,6781641.296,6781563.048,6781424.866,6781291.776,6781570.321,6781479.412,6781422.271,6781323.362,6781246.565,6781156.383,6780923.840,6780189.691,6779232.855,6781768.836,6783392.950,6783298.814,6783191.108,6782989.654,6783106.017,6783299.472,6783402.368,6783438.204,6783498.598,6783546.598,6783588.053,6783634.604,6783490.265,6783579.624,6783634.029,6783685.665,6783732.211,6783783.120,6783666.756,6783771.794,6783808.787,6783859.696,6783906.969,6783992.787,6783713.514,6783852.423,6784133.766,6784256.675,6784287.571,6784275.208,6784238.844,6784088.299,6784347.935,6784465.208,6784538.662,6784551.308,6784592.036,6784659.672,6784725.126,6784821.308,6784546.751,6784839.882,6783064.103,6783796.896,6783902.730,6783996.094,6784029.548,6784113.185,6781606.430,6780592.896,6781110.714,6780480.896,6781720.833,6780328.453,6781172.277,6782740.892,6783460.253,6783917.638]

kaupat_x=[421459.525,421323.447,423511.906,422449.600,420628.254,419913.695]
kaupat_y=[6783390.453,6782927.966,6782744.571,6781575.658,6783526.735,6784218.394]


x_alku=x_alku+risteykset_x+kaupat_x
y_alku=y_alku+risteykset_y+kaupat_y

asukasMäärä=[1,2,5,7,10,4,4,3,40,16,1,9,6,4,8,7,3,11,10,18,1,28,1,1,1,9,6,17,14,26,72,71,6,4,35,34,1,14,24,78,52,19,49,3,1,3,2,1,2,7,9,2,1,4,16,6,4,7,27,4,11,6,5,9,1,8,3,9,2,5,5,10,3,7,8,7,4,6,4,8,6,5,2,7,4,3,10,5,10,7,7,30,10,20,8,16,20,3,8,9,9,3,4,8,1,1,15,9,9,10,9,10,7,7,7,8,9,8,9,6,4,13,12,6,36,92,12,40,40,40,36,7,60,90,60,24,8,1,4,8,51,35,11,18,2,16,12,30,9,4,21,3,18,3,2,5,10,21,7,5,6,12,4,4,5,9,3,2,6,19,9,16,6,8,11,8,2,2,11,1,1,4,6,3,3,3,2,1,1,3,3,3,2,4,4,6,2,5,1,2,3,8,3,7,2,4,2,3,3,4,10,3,8,9,4,1,4,4,12,3,5,8,9,5,9,2,2,2,1,15,3,3,1,10,5,7,5,4,7,20,4,2,6,10,5,6,5,4,2,3,3,2,5,1,2,1,2,16,6,2,5,3,9,3,1,2,4,1,6,1,4,1,1,9,3,3,1,4,1,2,1,1,2,1,1,3,1,1,1,1,3,1,1,3,2,1,3,3,4,4,4,4,2,1,1,2,2,1,7,3,2,3,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,2,3,1,2,1,2,1]


kauppaKäydyt=[]
    

tietData_alku=[1,334,40,334,2,40,2,335,40,334,3,30,335,4,40,3,336,30,336,5,30,5,6,30,336,7,30,4,9,40,7,337,30,337,10,40,10,8,40,8,338,40,338,9,40,337,11,30,8,18,40,11,339,30,339,13,40,13,340,40,18,340,40,339,12,30,14,339,30,340,15,40,14,341,30,15,342,40,341,16,40,16,342,40,341,17,30,342,19,40,17,20,30,20,343,30,19,343,40,343,21,40,21,24,40,24,22,40,22,23,40,338,344,30,344,27,40,27,26,30,27,25,40,25,32,40,32,345,40,345,33,40,344,28,40,28,346,40,346,33,40,346,34,40,344,29,40,347,34,40,347,348,30,348,30,30,349,30,30,347,349,30,29,348,40,349,350,30,350,31,30,350,351,30,351,37,30,351,38,30,351,343,30,352,32,40,39,352,40,353,40,40,354,40,40,354,41,40,356,352,40,356,35,40,35,355,40,41,355,40,345,356,40,355,36,40,357,346,40,39,353,40,35,357,40,357,358,40,358,42,40,358,43,40,347,359,40,359,360,40,360,361,40,361,362,40,362,37,40,350,361,40,362,44,50,44,363,50,363,45,50,364,46,50,364,366,50,366,48,50,48,365,50,365,49,40,364,363,50,366,47,50,365,50,40,50,54,40,54,55,40,55,56,40,367,51,40,367,52,40,368,369,40,369,60,40,369,59,40,59,370,40,58,370,40,58,371,40,371,57,40,57,53,40,370,372,40,372,61,40,61,62,40,372,64,40,64,377,40,377,63,40,377,68,40,68,373,40,373,66,40,373,374,40,374,69,40,374,376,40,374,70,40,70,375,40,375,67,40,67,65,40,375,71,40,73,71,40,378,73,40,73,75,40,75,379,40,379,77,40,379,380,40,380,79,40,79,80,40,80,81,40,81,381,40,381,78,40,78,380,40,81,82,40,73,74,40,73,76,40,76,90,40,90,89,40,89,382,40,382,88,40,382,383,40,383,86,40,86,87,40,383,384,40,384,85,40,384,83,40,83,385,40,385,84,40,385,386,40,387,386,40,387,378,50,362,91,40,91,92,40,92,389,40,388,389,40,388,93,40,388,364,40,389,94,40,389,95,40,95,96,40,365,367,50,367,399,50,399,368,50,368,72,50,72,403,50,403,376,50,96,390,40,390,98,40,390,97,40,97,391,40,391,99,40,98,392,40,392,102,40,392,101,40,393,101,40,104,393,40,103,393,40,393,365,40,367,105,40,392,100,40,100,394,40,394,108,40,394,395,40,99,395,40,395,106,40,395,107,40,394,108,40,108,396,40,396,109,40,396,397,40,397,110,40,397,111,40,398,397,40,398,112,40,398,399,40,109,113,40,113,400,40,400,114,40,400,401,40,401,115,40,401,116,40,401,402,40,402,117,40,402,403,40,376,404,50,405,120,40,405,118,40,405,119,40,378,121,40,404,378,50,360,406,40,406,415,40,406,407,40,415,408,40,407,408,60,415,409,40,409,123,40,409,122,40,415,124,40,124,410,40,410,127,40,127,130,40,127,131,40,127,131,40,127,128,40,128,129,40,129,132,40,132,133,40,133,134,40,410,125,40,125,411,40,411,126,40,411,412,40,412,413,40,413,137,40,413,135,40,413,414,40,414,136,40,414,138,40,412,416,40,416,143,40,416,140,40,140,417,40,417,141,40,417,142,40,142,139,40,416,418,40,418,144,40,418,419,40,419,145,40,145,420,40,420,421,40,418,146,40,146,421,40,420,148,40,148,424,40,424,151,40,151,425,40,425,149,40,149,421,40,424,150,40,425,152,40,421,153,40,153,422,40,422,423,40,423,154,40,423,147,40,422,155,40,155,427,40,425,157,40,157,426,40,426,159,40,159,156,40,159,427,40,427,158,40,426,428,40,428,169,40,428,161,40,161,160,40,160,429,40,429,162,40,162,163,40,162,430,40,430,165,40,165,433,40,433,432,40,432,170,40,432,428,40,433,434,40,434,171,40,434,167,40,167,435,40,435,166,40,166,431,40,431,164,40,164,430,40,435,172,40,172,173,40,173,174,40,174,436,40,436,435,40,436,437,40,437,168,40,437,175,40,437,438,40,438,328,40,438,329,40,329,439,40,439,330,40,439,331,40,331,332,40,332,333,40,333,440,40,440,0,40,408,441,80,152,441,40,352,442,40,442,229,40,229,443,40,443,230,40,443,232,40,232,231,40,232,235,40,233,235,40,235,234,40,234,444,40,444,236,40,236,446,40,444,445,40,445,407,60,444,237,40,237,447,40,447,239,30,447,238,30,238,240,30,240,448,30,442,241,40,241,449,40,449,450,40,450,242,40,450,451,40,451,243,40,451,452,40,452,244,40,244,448,40,448,454,30,243,238,40,453,452,40,453,245,40,245,454,40,449,177,40,177,176,40,177,178,40,178,180,40,450,187,40,187,179,40,179,455,40,455,182,40,455,181,40,455,183,40,183,456,40,456,185,40,185,451,40,456,184,40,456,186,40,186,457,40,457,189,40,189,452,40,457,188,40,457,191,40,191,458,40,458,190,40,458,193,40,193,459,40,193,194,40,458,192,40,192,453,40,459,199,40,199,460,40,199,200,40,453,460,40,459,195,40,195,196,40,459,197,40,197,198,40,197,461,40,461,202,40,202,201,40,202,462,40,462,203,40,462,204,40,204,463,40,463,205,40,463,206,40,463,464,40,464,207,40,207,467,40,464,208,40,464,209,40,209,465,40,465,210,40,465,211,40,460,466,40,466,467,50,466,461,40,210,468,40,468,469,40,469,212,40,468,473,40,468,213,40,213,470,40,470,214,40,214,471,40,471,472,40,471,215,40,215,474,40,474,216,40,474,217,40,474,218,40,218,475,40,475,476,40,467,473,50,473,472,50,476,212,40,475,221,40,221,477,40,477,220,40,477,219,40,219,478,40,478,479,40,479,222,40,479,480,40,480,224,40,480,223,40,480,481,40,481,225,40,481,226,40,481,227,40,227,228,40,482,472,50,482,483,80,483,267,40,267,268,80,268,269,80,445,484,60,484,247,40,484,248,40,248,249,40,484,446,60,446,246,40,446,252,80,252,485,80,485,251,40,251,250,40,485,486,80,486,253,40,486,254,40,254,255,40,486,487,80,487,256,40,487,488,80,488,257,40,257,258,40,258,489,40,488,489,80,488,259,40,489,261,40,489,260,40,489,262,80,262,263,40,263,264,40,262,265,80,265,266,80,441,490,80,490,270,40,490,271,80,271,491,80,491,272,60,272,492,60,492,273,40,273,493,40,493,274,40,274,276,40,493,275,40,493,495,40,495,491,80,492,278,60,277,496,40,496,278,80,278,494,60,494,279,40,494,387,60,386,280,50,280,281,60,281,497,60,497,283,60,497,284,40,284,287,40,283,288,60,283,285,40,285,286,40,286,287,40,287,498,40,288,498,60,282,497,40,498,289,40,289,499,60,499,290,40,499,291,40,291,294,40,291,292,40,499,298,30,298,311,30,298,310,30,499,296,60,296,295,40,296,297,60,297,299,60,299,300,30,299,301,60,301,305,40,301,302,40,301,303,60,303,304,60,304,316,40,304,306,60,306,309,60,309,307,40,309,308,40,309,317,40,309,310,40,292,293,40,310,318,40,318,319,40,309,320,40,312,312,40,312,313,40,313,314,40,313,315,40,300,315,40,315,327,40,327,326,40,302,312,40,312,322,40,322,321,40,322,323,40,323,324,40,322,325,40,404,405,40,478,482,40,358,359,40,500,25,40,353,501,40,501,354,40,55,502,40,381,502,40,154,503,40,503,429,40,504,454,40,505,472,40,] #alku, loppu, nopeusrajoitus (km/h), alku, loppu, nopeusrajoitus...
tietDataKävely_alku=[55,57,410,501,122,501,335,500]


mittakaava = 1/1 #metriä

koko=0.06 #arvioisin noin 0.1 sopiva vääksyyn

kävelymatka = 1000 #metriä

tarkkuus = 1500*mittakaava

käynnistys=0 #tai parkkeeraus

summat = []

summat_x=[]
summat_y=[]

kävelyLista=[]

kaupatKulutukset=[]
kaupatMatkat=[]


def connectpoints(x,y,p1,p2):
    x1, x2 = x[p1], x[p2]
    y1, y2 = y[p1], y[p2]
    plt.plot([x1,x2],[y1,y2],'k-',zorder=0)
    
def distance(x_1,y_1,x_2,y_2):
    return(math.sqrt((x_1-x_2)**2+(y_1-y_2)**2))

def kulutus(x_1,y_1,x_2,y_2,v):
    return((0.001999*v**2-0.2712*v+16.33)/100000*(distance(x_1,y_1,x_2,y_2)/mittakaava))

from queue import PriorityQueue

class Graph:
    def __init__(self, num_of_vertices):
        self.v = num_of_vertices
        self.edges = [[-1 for i in range(num_of_vertices)] for j in range(num_of_vertices)]
        self.visited = []
        
    def add_edge(self, u, v, weight):
        self.edges[u][v] = weight
        self.edges[v][u] = weight

def dijkstra(graph, start_vertex):
    graph.visited=[]
    D = {v:float('inf') for v in range(graph.v)}
    D[start_vertex] = 0

    pq = PriorityQueue()
    pq.put((0, start_vertex))

    while not pq.empty():
        (dist, current_vertex) = pq.get()
        graph.visited.append(current_vertex)

        for neighbor in range(graph.v):
            if graph.edges[current_vertex][neighbor] != -1:
                distance = graph.edges[current_vertex][neighbor]
                if neighbor not in graph.visited:
                    old_cost = D[neighbor]
                    new_cost = D[current_vertex] + distance
                    if new_cost < old_cost:
                        pq.put((new_cost, neighbor))
                        D[neighbor] = new_cost
    return D


#lasketaan kulutus ilman uusia kauppoja:
x=x_alku.copy()
y=y_alku.copy()
tietData=tietData_alku.copy()


tieLaskuri2=0
g = Graph(len(x))
while tieLaskuri2<len(tietData):
    
    g.add_edge(tietData[tieLaskuri2],tietData[tieLaskuri2+1],kulutus(x[tietData[tieLaskuri2]],y[tietData[tieLaskuri2]],x[tietData[tieLaskuri2+1]],y[tietData[tieLaskuri2+1]],tietData[tieLaskuri2+2]))
    tieLaskuri2=tieLaskuri2+3

#matkaGraph:
tieLaskuri3=0

g_2 = Graph(len(x))
while tieLaskuri3<len(tietData):
    g_2.add_edge(tietData[tieLaskuri3],tietData[tieLaskuri3+1], distance(x[tietData[tieLaskuri3]],y[tietData[tieLaskuri3]],x[tietData[tieLaskuri3+1]],y[tietData[tieLaskuri3+1]]))
    tieLaskuri3=tieLaskuri3+3
tieLaskuri3=0
while tieLaskuri3<len(tietDataKävely_alku):
    g_2.add_edge(tietDataKävely_alku[tieLaskuri3],tietDataKävely_alku[tieLaskuri3+1], distance(x[tietDataKävely_alku[tieLaskuri3]],y[tietDataKävely_alku[tieLaskuri3]],x[tietDataKävely_alku[tieLaskuri3+1]],y[tietDataKävely_alku[tieLaskuri3+1]]))
    tieLaskuri3=tieLaskuri3+2


summa=0
kävelyLaskuri=0
for vertex in range(asuntojenMäärä):
    kulutukset=[]
    matkat=[]
    kauppaVertex=len(x)-kaupatAlussa
    while kauppaVertex<len(x):
        D = dijkstra(g, kauppaVertex)

        D_2 = dijkstra(g_2, kauppaVertex)
            
        print(vertex)
        kulutukset.append(D[vertex]*asukasMäärä[vertex]+2*käynnistys*asukasMäärä[vertex])
        
        #(1.kauppa,1.talo);(1.kauppa,1.talo) nollas
        kaupatKulutukset.append(D[vertex]*asukasMäärä[vertex]+2*käynnistys*asukasMäärä[vertex])
        
        matkat.append(D_2[vertex])
        kaupatMatkat.append(D_2[vertex])
            
        kauppaVertex=kauppaVertex+1
        
    #print(kulutukset)
    #print(matkat)
    if min(matkat) > kävelymatka*mittakaava:
        
        summa=summa+min(kulutukset)
        
    if min(matkat)< kävelymatka*mittakaava:
        kävelyLaskuri=kävelyLaskuri+asukasMäärä[vertex]
alkuKulutus=summa
alkuKävely=kävelyLaskuri
    
    
    
    
summat=[]
summat_x=[]
summat_y=[]


for risteysLaskuri in range(len(x_alku)-kaupatAlussa):
    x=x_alku.copy()
    y=y_alku.copy()
    tietData=tietData_alku.copy()
    
    x.append(x[risteysLaskuri])
    y.append(y[risteysLaskuri])
    print()
    print(risteysLaskuri)
    
    tietData.append(risteysLaskuri)
    tietData.append(len(x)-1)
    tietData.append(40)
    
    
    


    #kulutusGraph:
    tieLaskuri2=0

    g = Graph(len(x))
    while tieLaskuri2<len(tietData):
        g.add_edge(tietData[tieLaskuri2],tietData[tieLaskuri2+1],kulutus(x[tietData[tieLaskuri2]],y[tietData[tieLaskuri2]],x[tietData[tieLaskuri2+1]],y[tietData[tieLaskuri2+1]],tietData[tieLaskuri2+2]))
        tieLaskuri2=tieLaskuri2+3

    #matkaGraph:
    tieLaskuri3=0

    g_2 = Graph(len(x))
    while tieLaskuri3<len(tietData):
        g_2.add_edge(tietData[tieLaskuri3],tietData[tieLaskuri3+1], distance(x[tietData[tieLaskuri3]],y[tietData[tieLaskuri3]],x[tietData[tieLaskuri3+1]],y[tietData[tieLaskuri3+1]]))  
        tieLaskuri3=tieLaskuri3+3
    tieLaskuri3=0
    while tieLaskuri3<len(tietDataKävely_alku):
        g_2.add_edge(tietDataKävely_alku[tieLaskuri3],tietDataKävely_alku[tieLaskuri3+1], distance(x[tietDataKävely_alku[tieLaskuri3]],y[tietDataKävely_alku[tieLaskuri3]],x[tietDataKävely_alku[tieLaskuri3+1]],y[tietDataKävely_alku[tieLaskuri3+1]]))
        tieLaskuri3=tieLaskuri3+2


    summa=0
    kävelyLaskuri=0

    for vertex in range(asuntojenMäärä):
        kulutukset=[]
        matkat=[]
        kauppaVertex=len(x)-1 #eli vika
        
        D = dijkstra(g, kauppaVertex)

        D_2 = dijkstra(g_2, kauppaVertex)
            
        for i in range(kaupatAlussa):
            kulutukset.append(kaupatKulutukset[vertex*kaupatAlussa+i])
            matkat.append(kaupatMatkat[vertex*kaupatAlussa+i])
        
            
        kulutukset.append(D[vertex]*asukasMäärä[vertex]+2*käynnistys*asukasMäärä[vertex])
        
        
        matkat.append(D_2[vertex])
        
            
        kauppaVertex=kauppaVertex+1
            
        #print(kulutukset)
        #print(matkat)
        if min(matkat) > kävelymatka*mittakaava:
            
            summa=summa+min(kulutukset)
        else:
            print("KÄVELY")
            kävelyLaskuri=kävelyLaskuri+asukasMäärä[vertex]
        #print(min(kulutukset))
        #print(summa)
        
    kävelyLista.append(kävelyLaskuri)
    
    print("Uuden kaupan koordinaatit: (",x[-1],",",y[-1],"). Yhteiskulutus on:",summa)
    print()
    summat_x.append(x[-1])
    summat_y.append(y[-1])
    summat.append(summa)
    
    

    
    #listaan kuinka monta kauppaa tiellä 
    
    
for i in range(kaupatAlussa):
    summat_x.append(x_alku[-kaupatAlussa+i])
    summat_y.append(y_alku[-kaupatAlussa+i])
    summat.append(alkuKulutus)
    kävelyLista.append(alkuKävely)
    

kauppaLaskuri=0
while kauppaLaskuri < len(tietData)/3-1:
    
    x=x_alku.copy()
    y=y_alku.copy()
    
    x2=x_alku[tietData_alku[kauppaLaskuri*3]]
    y2=y_alku[tietData_alku[kauppaLaskuri*3]]
    x3=x_alku[tietData_alku[kauppaLaskuri*3+1]]
    y3=y_alku[tietData_alku[kauppaLaskuri*3+1]]
    
    
    
    kauppaTieLaskuri = 0
    
    
    while (kauppaTieLaskuri+1)*tarkkuus < distance(x2,y2,x3,y3):
        
        
        
        
        tietData=tietData_alku.copy()
        
        
        if len(x)>len(x_alku): #vain alussa
            x.pop()
        if len(y)>len(y_alku):
            y.pop()
        
        
        x.append(x[tietData[kauppaLaskuri*3]]+(x[tietData[kauppaLaskuri*3+1]]-x[tietData[kauppaLaskuri*3]])*(kauppaTieLaskuri+1)*tarkkuus/distance(x2,y2,x3,y3))
        y.append(y[tietData[kauppaLaskuri*3]]+(y[tietData[kauppaLaskuri*3+1]]-y[tietData[kauppaLaskuri*3]])*(kauppaTieLaskuri+1)*tarkkuus/distance(x2,y2,x3,y3))
        tietData.append(tietData[kauppaLaskuri*3+1])
        tietData.append(len(x)-1)
        tietData.append(tietData[kauppaLaskuri*3+2])
        tietData[kauppaLaskuri*3+1]=len(x)-1
        

        


        #kulutusGraph:
        tieLaskuri2=0

        g = Graph(len(x))
        while tieLaskuri2<len(tietData):
            g.add_edge(tietData[tieLaskuri2],tietData[tieLaskuri2+1],kulutus(x[tietData[tieLaskuri2]],y[tietData[tieLaskuri2]],x[tietData[tieLaskuri2+1]],y[tietData[tieLaskuri2+1]],tietData[tieLaskuri2+2]))
            tieLaskuri2=tieLaskuri2+3

        #matkaGraph:
        tieLaskuri3=0

        g_2 = Graph(len(x))
        while tieLaskuri3<len(tietData):
            g_2.add_edge(tietData[tieLaskuri3],tietData[tieLaskuri3+1], distance(x[tietData[tieLaskuri3]],y[tietData[tieLaskuri3]],x[tietData[tieLaskuri3+1]],y[tietData[tieLaskuri3+1]]))  
            tieLaskuri3=tieLaskuri3+3
        tieLaskuri3=0
        while tieLaskuri3<len(tietDataKävely_alku):
            g_2.add_edge(tietDataKävely_alku[tieLaskuri3],tietDataKävely_alku[tieLaskuri3+1], distance(x[tietDataKävely_alku[tieLaskuri3]],y[tietDataKävely_alku[tieLaskuri3]],x[tietDataKävely_alku[tieLaskuri3+1]],y[tietDataKävely_alku[tieLaskuri3+1]]))
            tieLaskuri3=tieLaskuri3+2



        summa=0
        kävelyLaskuri=0

        for vertex in range(asuntojenMäärä):
            
            kulutukset=[]
            matkat=[]
            kauppaVertex=len(x)-kauppojenMäärä
            while kauppaVertex<len(x):
                D = dijkstra(g, kauppaVertex)

                D_2 = dijkstra(g_2, kauppaVertex)
                    
                
                kulutukset.append(D[vertex]*asukasMäärä[vertex]+2*käynnistys*asukasMäärä[vertex])
                matkat.append(D_2[vertex])
                
                    
                kauppaVertex=kauppaVertex+1
                
            
            if min(matkat) > kävelymatka*mittakaava:
                
                summa=summa+min(kulutukset)
            else:
                print("KÄVELY")
                kävelyLaskuri=kävelyLaskuri+asukasMäärä[vertex]
                print(kävelyLaskuri)
            
        print("lol")
        print(kävelyLaskuri)
        print(len(kävelyLista))
        kävelyLista.append(kävelyLaskuri)
        print(kävelyLista)
        
        
        print("Uuden kaupan koordinaatit: (",x[-1],",",y[-1],"). Yhteiskulutus on:",summa)
        print()
        summat_x.append(x[-1])
        summat_y.append(y[-1])
        summat.append(summa)
        
        kauppaTieLaskuri = kauppaTieLaskuri +1
    
    kauppaKäydyt.append(kauppaTieLaskuri)
    kauppaLaskuri=kauppaLaskuri+1
print(kauppaKäydyt)
    
print(kävelyLista)
i_2=0
while i_2<len(summat):
    print("(",summat_x[i_2],",",summat_y[i_2],") :",summat[i_2],",",kävelyLista[i_2])
    i_2=i_2+1


print()
print(min(summat))
print()

print("Optimaalinen paikka sijoittaa uusi palvelu on: ")
for n_1, i_1 in enumerate(summat):
    if i_1 == min(summat):
        print(summat_x[n_1],",",summat_y[n_1])
        plt.scatter(summat_x[n_1],summat_y[n_1],marker='*', c='w',edgecolors='g',zorder=3,linewidth=1*koko, s=100*koko)

print("Eniten kävelijöitä: ")
for n_1, i_1 in enumerate(kävelyLista):
    if i_1 == max(kävelyLista):
        print(summat_x[n_1],",",summat_y[n_1])
        plt.scatter(summat_x[n_1],summat_y[n_1],marker='o', c='w',edgecolors='k',zorder=-3,linewidth=1*koko, s=200*koko)




x=x_alku.copy()
y=y_alku.copy()
tietData=tietData_alku.copy()



plt.grid(color='tab:gray', linestyle='--', linewidth=0.3    )

segments_z =[]
vmin, vmax =  min(summat),alkuKulutus


norm = plt.Normalize(vmin, vmax)
cm = plt.cm.jet



i=0
kauppaLaskuri=0
while i < len(tietData)/3:
    
    if kauppaKäydyt[i] == 0:
        segments_z.append( ((summat_x[tietData[i*3]],summat_y[tietData[i*3]]),(summat_x[tietData[i*3+1]],summat_y[tietData[i*3+1]]),(summat[tietData[i*3]]+summat[tietData[i*3+1]])/2))
        
    else:
        segments_z.append( ((summat_x[tietData[i*3]],summat_y[tietData[i*3]]),(summat_x[len(x_alku)+kauppaLaskuri],summat_y[len(x_alku)+kauppaLaskuri]),(summat[tietData[i*3]]+summat[len(x_alku)+kauppaLaskuri])/2))
        print((summat[tietData[i*3]]+summat[len(x_alku)+kauppaLaskuri])/2)
        kauppaLaskuri=kauppaLaskuri+kauppaKäydyt[i]
    
    
    
    i=i+1
    
i=0
kauppaLaskuri=0
while i < len(tietData)/3:
    kauppaLaskuri2=0
    while kauppaLaskuri2 < kauppaKäydyt[i]-1:
        segments_z.append( ((summat_x[len(x_alku)+kauppaLaskuri+kauppaLaskuri2],summat_y[len(x_alku)+kauppaLaskuri+kauppaLaskuri2]),(summat_x[len(x_alku)+kauppaLaskuri+kauppaLaskuri2+1],summat_y[len(x_alku)+kauppaLaskuri+kauppaLaskuri2+1]),(summat[len(x_alku)+kauppaLaskuri+kauppaLaskuri2]+summat[len(x_alku)+kauppaLaskuri+kauppaLaskuri2+1])/2))
        kauppaLaskuri2=kauppaLaskuri2+1
    if kauppaKäydyt[i] >0:
        segments_z.append( ((summat_x[len(x_alku)+kauppaLaskuri+kauppaLaskuri2],summat_y[len(x_alku)+kauppaLaskuri+kauppaLaskuri2]),(summat_x[tietData[i*3+1]],summat_y[tietData[i*3+1]]),(summat[len(x_alku)+kauppaLaskuri+kauppaLaskuri2]+summat[tietData[i*3+1]])/2))
    
    
    kauppaLaskuri=kauppaLaskuri+kauppaKäydyt[i]
    i=i+1   
    
    
    
sm = plt.cm.ScalarMappable(cmap='jet', norm=norm)
print(segments_z)   
for p1, p2, z in segments_z:
    x_3, y_3 = zip(p1,p2)
    plt.plot(x_3, y_3, color=cm(norm(z)),linewidth=2*koko,zorder=3)



asuntoLaskuri=0
while asuntoLaskuri<asuntojenMäärä:
    #plt.plot(x[asuntoLaskuri],y[asuntoLaskuri], 'ks', markerfacecolor = 'b',zorder=2)
    plt.scatter(x[asuntoLaskuri],y[asuntoLaskuri],marker='s', c='b',edgecolors='k',linewidth=1*koko,zorder=2, s=30*koko)
    plt.text(x[asuntoLaskuri]+0.1*koko,y[asuntoLaskuri]+0.1*koko , asuntoLaskuri,zorder=5,fontsize=10*koko)
    asuntoLaskuri=asuntoLaskuri+1

while asuntoLaskuri<len(x)-kaupatAlussa:
    #plt.plot(x[asuntoLaskuri],y[asuntoLaskuri], 'wo', markerfacecolor = 'k',zorder=0)
    plt.scatter(x[asuntoLaskuri],y[asuntoLaskuri],marker='o', c='w',edgecolors='k',linewidth=1*koko,zorder=0, s=30*koko)
    plt.text(x[asuntoLaskuri]+0.1*koko,y[asuntoLaskuri]+0.1*koko , asuntoLaskuri,zorder=5,fontsize=10*koko)
    asuntoLaskuri=asuntoLaskuri+1

while asuntoLaskuri<len(x):
    plt.scatter(x[asuntoLaskuri],y[asuntoLaskuri],marker='o', c='r',edgecolors='k',linewidth=1*koko,zorder=2, s=30*koko)
    #plt.plot(x[asuntoLaskuri],y[asuntoLaskuri], 'ko',markerfacecolor = 'red',zorder=2) 
    plt.text(x[asuntoLaskuri]+0.1*koko,y[asuntoLaskuri]+0.1*koko , asuntoLaskuri,zorder=5,fontsize=10*koko)
    asuntoLaskuri=asuntoLaskuri+1





plt.scatter(summat_x,summat_y, c=summat,cmap='jet',linewidth=1*koko,zorder=4, s=15*koko) #summat[i]-a)/(b-a) 

#connectpoints(x,y,p1,p2)
tieLaskuri3=0
while tieLaskuri3<len(tietDataKävely_alku):
    connectpoints(x,y,tietDataKävely_alku[tieLaskuri3],tietDataKävely_alku[tieLaskuri3+1])
    tieLaskuri3=tieLaskuri3+2


plt.colorbar(sm,aspect=50)
    

print(alkuKulutus)
print((min(summat)/alkuKulutus),"%")

plt.axis('equal')
plt.show()
